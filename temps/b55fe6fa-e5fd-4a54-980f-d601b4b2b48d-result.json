{"name": "test_all_api[caseinfo12]", "status": "failed", "statusDetails": {"message": "AssertionError: assert '成功' in '车辆不在线'", "trace": "self = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D733685100>\ncaseinfo = {'asserts': '成功', 'data': {'bikeCommandType': 2, 'terminalNo': 90112345}, 'depends': 'n', 'execute': '0-1-y', ...}\n\n    @pytest.mark.parametrize('caseinfo', yaml_util.read_yaml('/all_testcase/case/all_api.yaml'))\n    def test_all_api(self, caseinfo):\n        execute = str(caseinfo['execute'])[-1].upper()\n        # 用例是否执行\n        if execute == 'Y':\n            # logger.info('请求参数：%s' % caseinfo)\n            # logger.info('请求参数类型：%s' % type(caseinfo))\n            depends = str(caseinfo['depends']).upper()\n            # logger.info('是否有接口依赖：%s' % depends)\n            num = caseinfo['num']\n            name = caseinfo['name']\n            url = TestAllApi.base_url+caseinfo['url']\n            method = caseinfo['method']\n            token_source = caseinfo['token_source']\n            header = ''\n            token = ''\n            # web平台端token\n            if token_source == 'admin':\n                header = CommonUtil.header_admin\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_admin']}\n            # web运营商端token\n            elif token_source == 'operator':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_operator']}\n            # 商户端app token\n            elif token_source == 'merchant_app':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_merchant_app']}\n            # 厂测微信小程序token\n            elif token_source == 'factory_wx_mini':\n                header = CommonUtil.header_factory_wx_mini\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_factory_wx_mini']}\n            # 用户端微信小程序token\n            elif token_source == 'user_wx_mini':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_user_wx_mini']}\n            header.update(token)\n            data = caseinfo['data']\n            asserts = caseinfo['asserts']\n            logger.info('测试接口：'+num+'%s' % name)\n            res = ''\n            if depends == 'N':\n                res = RequestsUtil().send_request(method, url, data, headers=header)\n                yaml_util.write_yaml('/all_testcase/case/response.yaml', {num: res.json()})\n                # 断言失败结果写入日志\n                assert_in(asserts, res.json()['message'])\n>               assert asserts in res.json()['message']\nE               AssertionError: assert '成功' in '车辆不在线'\n\nall_testcase\\api\\test_all_api.py:80: AssertionError"}, "attachments": [{"name": "log", "source": "0c7ed974-55c6-42f5-aebe-cf8ddb9243e0-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'num': '0-1-13', 'name': '厂测小程序获取车辆绑定中控网络开电池锁', 'execute': '0-1-y', 'token_source': 'factory_wx_mini', 'url': '/rent-api/bike/factory-user/bike/send-command', 'method': 'get', 'data': {'terminalNo': 90112345, 'bikeCommandType': 2}, 'asserts': '成功', 'depends': 'n'}"}], "start": 1658313218831, "stop": 1658313218851, "uuid": "af4eba76-460a-4524-bd9b-6b69905792d6", "historyId": "5bc5f58a9e9f0d73fb757db881ad80b1", "testCaseId": "22edc87ed92309dd4b883632e5fc832d", "fullName": "all_testcase.api.test_all_api.TestAllApi#test_all_api", "labels": [{"name": "parentSuite", "value": "all_testcase.api"}, {"name": "suite", "value": "test_all_api"}, {"name": "subSuite", "value": "TestAllApi"}, {"name": "host", "value": "DESKTOP-GCK34GH"}, {"name": "thread", "value": "21572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "all_testcase.api.test_all_api"}]}
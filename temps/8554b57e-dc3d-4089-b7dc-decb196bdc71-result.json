{"name": "test_all_api[caseinfo67]", "status": "broken", "statusDetails": {"message": "KeyError: '4-5'", "trace": "self = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D731E6A220>\ndata = ['4-5.data.list.0.id']\n\n    def get_depends(self, data):\n        get_depends_value = []\n        for depends_value in data:\n            depends_value = depends_value.split('.')\n            msg = yaml_util.read_yaml('/all_testcase/case/response.yaml')\n            # logger.info('读取保存在yaml的数据：%s' % msg)\n            for value in depends_value:\n                try:\n>                   value = int(value)\nE                   ValueError: invalid literal for int() with base 10: '4-5'\n\nall_testcase\\api\\test_all_api.py:28: ValueError\n\nDuring handling of the above exception, another exception occurred:\n\nself = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D73365A550>\ncaseinfo = {'asserts': '成功', 'data': {'status': 0}, 'depends': 'y', 'depends_key': ['id'], ...}\n\n    @pytest.mark.parametrize('caseinfo', yaml_util.read_yaml('/all_testcase/case/all_api.yaml'))\n    def test_all_api(self, caseinfo):\n        execute = str(caseinfo['execute'])[-1].upper()\n        # 用例是否执行\n        if execute == 'Y':\n            # logger.info('请求参数：%s' % caseinfo)\n            # logger.info('请求参数类型：%s' % type(caseinfo))\n            depends = str(caseinfo['depends']).upper()\n            # logger.info('是否有接口依赖：%s' % depends)\n            num = caseinfo['num']\n            name = caseinfo['name']\n            url = TestAllApi.base_url+caseinfo['url']\n            method = caseinfo['method']\n            token_source = caseinfo['token_source']\n            header = ''\n            token = ''\n            # web平台端token\n            if token_source == 'admin':\n                header = CommonUtil.header_admin\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_admin']}\n            # web运营商端token\n            elif token_source == 'operator':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_operator']}\n            # 商户端app token\n            elif token_source == 'merchant_app':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_merchant_app']}\n            # 厂测微信小程序token\n            elif token_source == 'factory_wx_mini':\n                header = CommonUtil.header_factory_wx_mini\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_factory_wx_mini']}\n            # 用户端微信小程序token\n            elif token_source == 'user_wx_mini':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_user_wx_mini']}\n            header.update(token)\n            data = caseinfo['data']\n            asserts = caseinfo['asserts']\n            logger.info('测试接口：'+num+'%s' % name)\n            res = ''\n            if depends == 'N':\n                res = RequestsUtil().send_request(method, url, data, headers=header)\n                yaml_util.write_yaml('/all_testcase/case/response.yaml', {num: res.json()})\n                # 断言失败结果写入日志\n                assert_in(asserts, res.json()['message'])\n                assert asserts in res.json()['message']\n            elif depends == 'Y':\n                depends_site = caseinfo['depends_site']\n                depends_type = caseinfo['depends_type']\n                if depends_site == 'body' or depends_site is None:\n                    # 获取依赖key值\n                    depends_key = caseinfo['depends_key']\n                    # 获取依赖value值\n                    depends_value = caseinfo['depends_value']\n                    get_depends_value = TestAllApi().get_depends(depends_value)\n                    # 依赖拼接成{\"id\": 1}\n                    depends_data = ''\n                    if depends_type == 'str':\n                        depends_data = dict(zip(depends_key, get_depends_value))\n                    # 依赖拼接成{\"id\": [1]}\n                    elif depends_type == 'list':\n                        depends_data = dict(zip(depends_key, [get_depends_value]))\n                    logger.info('我是depends_data：%s' % depends_data)\n                    logger.info('我是depends_data类型：%s' % type(depends_data))\n                    if data is None:\n                        data = {}\n                        data.update(depends_data)\n                    else:\n                        data.update(depends_data)\n                    res = RequestsUtil().send_request(method, url, data, headers=header)\n                    yaml_util.write_yaml('/all_testcase/case/response.yaml', {num: res.json()})\n                    assert_in(asserts, res.json()['message'])\n                    assert asserts in res.json()['message']\n                elif depends_site == 'url':\n                    depends_key = caseinfo['depends_key']\n                    depends_value = caseinfo['depends_value']\n>                   get_depends_value = TestAllApi().get_depends(depends_value)\n\nall_testcase\\api\\test_all_api.py:111: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D731E6A220>\ndata = ['4-5.data.list.0.id']\n\n    def get_depends(self, data):\n        get_depends_value = []\n        for depends_value in data:\n            depends_value = depends_value.split('.')\n            msg = yaml_util.read_yaml('/all_testcase/case/response.yaml')\n            # logger.info('读取保存在yaml的数据：%s' % msg)\n            for value in depends_value:\n                try:\n                    value = int(value)\n                    # logger.info('拆分依赖路径：%s' % value)\n                    msg = msg[value]\n                except:\n>                   msg = msg[value]\nE                   KeyError: '4-5'\n\nall_testcase\\api\\test_all_api.py:32: KeyError"}, "attachments": [{"name": "log", "source": "c447a160-cad1-47f0-8293-1feda3b15a65-attachment.txt", "type": "text/plain"}], "parameters": [{"name": "caseinfo", "value": "{'num': '4-9', 'name': '车辆列表详情启用车辆', 'execute': '4-y', 'token_source': 'admin', 'url': '/rent-api/bike/platform/bike/update-state', 'method': 'put', 'data': {'status': 0}, 'asserts': '成功', 'depends': 'y', 'depends_site': 'url', 'depends_type': 'str', 'depends_key': ['id'], 'depends_value': ['4-5.data.list.0.id']}"}], "start": 1658313221516, "stop": 1658313221574, "uuid": "d153f05f-d06a-4a8b-8c7d-7b03f0d5421b", "historyId": "4acf896e41be3d2fd265dcc213b8b3a2", "testCaseId": "22edc87ed92309dd4b883632e5fc832d", "fullName": "all_testcase.api.test_all_api.TestAllApi#test_all_api", "labels": [{"name": "parentSuite", "value": "all_testcase.api"}, {"name": "suite", "value": "test_all_api"}, {"name": "subSuite", "value": "TestAllApi"}, {"name": "host", "value": "DESKTOP-GCK34GH"}, {"name": "thread", "value": "21572-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "all_testcase.api.test_all_api"}]}
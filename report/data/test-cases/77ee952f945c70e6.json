{"uid":"77ee952f945c70e6","name":"test_all_api[caseinfo9]","fullName":"all_testcase.api.test_all_api.TestAllApi#test_all_api","historyId":"3967b3dad00a1f806699ff3f902edd0d","time":{"start":1658313218770,"stop":1658313218788,"duration":18},"status":"failed","statusMessage":"AssertionError: assert '成功' in '车辆不在线'","statusTrace":"self = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D73367EB80>\ncaseinfo = {'asserts': '成功', 'data': {'bikeCommandType': 12, 'terminalNo': 90112345}, 'depends': 'n', 'execute': '0-1-y', ...}\n\n    @pytest.mark.parametrize('caseinfo', yaml_util.read_yaml('/all_testcase/case/all_api.yaml'))\n    def test_all_api(self, caseinfo):\n        execute = str(caseinfo['execute'])[-1].upper()\n        # 用例是否执行\n        if execute == 'Y':\n            # logger.info('请求参数：%s' % caseinfo)\n            # logger.info('请求参数类型：%s' % type(caseinfo))\n            depends = str(caseinfo['depends']).upper()\n            # logger.info('是否有接口依赖：%s' % depends)\n            num = caseinfo['num']\n            name = caseinfo['name']\n            url = TestAllApi.base_url+caseinfo['url']\n            method = caseinfo['method']\n            token_source = caseinfo['token_source']\n            header = ''\n            token = ''\n            # web平台端token\n            if token_source == 'admin':\n                header = CommonUtil.header_admin\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_admin']}\n            # web运营商端token\n            elif token_source == 'operator':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_operator']}\n            # 商户端app token\n            elif token_source == 'merchant_app':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_merchant_app']}\n            # 厂测微信小程序token\n            elif token_source == 'factory_wx_mini':\n                header = CommonUtil.header_factory_wx_mini\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_factory_wx_mini']}\n            # 用户端微信小程序token\n            elif token_source == 'user_wx_mini':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_user_wx_mini']}\n            header.update(token)\n            data = caseinfo['data']\n            asserts = caseinfo['asserts']\n            logger.info('测试接口：'+num+'%s' % name)\n            res = ''\n            if depends == 'N':\n                res = RequestsUtil().send_request(method, url, data, headers=header)\n                yaml_util.write_yaml('/all_testcase/case/response.yaml', {num: res.json()})\n                # 断言失败结果写入日志\n                assert_in(asserts, res.json()['message'])\n>               assert asserts in res.json()['message']\nE               AssertionError: assert '成功' in '车辆不在线'\n\nall_testcase\\api\\test_all_api.py:80: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"clean_extract","time":{"start":1658313217581,"stop":1658313217581,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db_delete","time":{"start":1658313217581,"stop":1658313217665,"duration":84},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0},{"name":"db_insert","time":{"start":1658313217665,"stop":1658313217705,"duration":40},"status":"passed","steps":[],"attachments":[],"parameters":[],"hasContent":false,"stepsCount":0,"shouldDisplayMessage":false,"attachmentsCount":0}],"testStage":{"status":"failed","statusMessage":"AssertionError: assert '成功' in '车辆不在线'","statusTrace":"self = <all_testcase.api.test_all_api.TestAllApi object at 0x000001D73367EB80>\ncaseinfo = {'asserts': '成功', 'data': {'bikeCommandType': 12, 'terminalNo': 90112345}, 'depends': 'n', 'execute': '0-1-y', ...}\n\n    @pytest.mark.parametrize('caseinfo', yaml_util.read_yaml('/all_testcase/case/all_api.yaml'))\n    def test_all_api(self, caseinfo):\n        execute = str(caseinfo['execute'])[-1].upper()\n        # 用例是否执行\n        if execute == 'Y':\n            # logger.info('请求参数：%s' % caseinfo)\n            # logger.info('请求参数类型：%s' % type(caseinfo))\n            depends = str(caseinfo['depends']).upper()\n            # logger.info('是否有接口依赖：%s' % depends)\n            num = caseinfo['num']\n            name = caseinfo['name']\n            url = TestAllApi.base_url+caseinfo['url']\n            method = caseinfo['method']\n            token_source = caseinfo['token_source']\n            header = ''\n            token = ''\n            # web平台端token\n            if token_source == 'admin':\n                header = CommonUtil.header_admin\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_admin']}\n            # web运营商端token\n            elif token_source == 'operator':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_operator']}\n            # 商户端app token\n            elif token_source == 'merchant_app':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_merchant_app']}\n            # 厂测微信小程序token\n            elif token_source == 'factory_wx_mini':\n                header = CommonUtil.header_factory_wx_mini\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_factory_wx_mini']}\n            # 用户端微信小程序token\n            elif token_source == 'user_wx_mini':\n                token = {'token': yaml_util.read_yaml('/all_testcase/case/dependCase.yaml')['token_user_wx_mini']}\n            header.update(token)\n            data = caseinfo['data']\n            asserts = caseinfo['asserts']\n            logger.info('测试接口：'+num+'%s' % name)\n            res = ''\n            if depends == 'N':\n                res = RequestsUtil().send_request(method, url, data, headers=header)\n                yaml_util.write_yaml('/all_testcase/case/response.yaml', {num: res.json()})\n                # 断言失败结果写入日志\n                assert_in(asserts, res.json()['message'])\n>               assert asserts in res.json()['message']\nE               AssertionError: assert '成功' in '车辆不在线'\n\nall_testcase\\api\\test_all_api.py:80: AssertionError","steps":[],"attachments":[{"uid":"c7b8847902ed3a76","name":"log","source":"c7b8847902ed3a76.txt","type":"text/plain","size":213}],"parameters":[],"hasContent":true,"stepsCount":0,"shouldDisplayMessage":true,"attachmentsCount":1},"afterStages":[],"labels":[{"name":"parentSuite","value":"all_testcase.api"},{"name":"suite","value":"test_all_api"},{"name":"subSuite","value":"TestAllApi"},{"name":"host","value":"DESKTOP-GCK34GH"},{"name":"thread","value":"21572-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"all_testcase.api.test_all_api"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"caseinfo","value":"{'num': '0-1-10', 'name': '厂测小程序网络撤防', 'execute': '0-1-y', 'token_source': 'factory_wx_mini', 'url': '/rent-api/bike/factory-user/bike/send-command', 'method': 'get', 'data': {'terminalNo': 90112345, 'bikeCommandType': 12}, 'asserts': '成功', 'depends': 'n'}"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Product defects","matchedStatuses":[],"flaky":false}],"tags":[]},"source":"77ee952f945c70e6.json","parameterValues":["{'num': '0-1-10', 'name': '厂测小程序网络撤防', 'execute': '0-1-y', 'token_source': 'factory_wx_mini', 'url': '/rent-api/bike/factory-user/bike/send-command', 'method': 'get', 'data': {'terminalNo': 90112345, 'bikeCommandType': 12}, 'asserts': '成功', 'depends': 'n'}"]}